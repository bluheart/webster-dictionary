use std::collections::HashMap;

const A: usize = 0;
const B: usize = A + 933360;
const C: usize = B + 776960;
const D: usize = C + 1372742;
const E: usize = D + 849393;
const F: usize = E + 630480;
const G: usize = F + 595977;
const H: usize = G + 434811;
const I: usize = H + 521260;
const J: usize = I + 642968;
const K: usize = J + 107138;
const L: usize = K + 102518;
const M: usize = L + 479450;
const N: usize = M + 719122;
const O: usize = N + 245654;
const P: usize = O + 349898;
const Q: usize = P + 1293668;
const R: usize = Q + 87144;
const S: usize = R + 723626;
const T: usize = S + 1750302;
const U: usize = T + 796584;
const V: usize = U + 250536;
const W: usize = V + 247304;
const X: usize = W + 367346;
const Y: usize = X + 15078;
const Z: usize = Y + 36692;
const END: usize = 14366678;

pub fn new() -> HashMap<char, usize> {
    let mut alphabet = HashMap::new();
    alphabet.insert('a', A);
    alphabet.insert('b', B);
    alphabet.insert('c', C);
    alphabet.insert('d', D);
    alphabet.insert('e', E);
    alphabet.insert('f', F);
    alphabet.insert('g', G);
    alphabet.insert('h', H);
    alphabet.insert('i', I);
    alphabet.insert('j', J);
    alphabet.insert('k', K);
    alphabet.insert('l', L);
    alphabet.insert('m', M);
    alphabet.insert('n', N);
    alphabet.insert('o', O);
    alphabet.insert('p', P);
    alphabet.insert('q', Q);
    alphabet.insert('r', R);
    alphabet.insert('s', S);
    alphabet.insert('t', T);
    alphabet.insert('u', U);
    alphabet.insert('v', V);
    alphabet.insert('w', W);
    alphabet.insert('x', X);
    alphabet.insert('y', Y);
    alphabet.insert('z', Z);
    alphabet.insert('{', END);
    return alphabet;
}
